// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hueter57/catalyst/backend/internal/ent/assignee"
	"github.com/hueter57/catalyst/backend/internal/ent/category"
	"github.com/hueter57/catalyst/backend/internal/ent/reminder"
	"github.com/hueter57/catalyst/backend/internal/ent/task"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (_c *TaskCreate) SetTitle(v string) *TaskCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *TaskCreate) SetDescription(v string) *TaskCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *TaskCreate) SetNillableDescription(v *string) *TaskCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *TaskCreate) SetStatus(v task.Status) *TaskCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *TaskCreate) SetNillableStatus(v *task.Status) *TaskCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetImportance sets the "importance" field.
func (_c *TaskCreate) SetImportance(v task.Importance) *TaskCreate {
	_c.mutation.SetImportance(v)
	return _c
}

// SetNillableImportance sets the "importance" field if the given value is not nil.
func (_c *TaskCreate) SetNillableImportance(v *task.Importance) *TaskCreate {
	if v != nil {
		_c.SetImportance(*v)
	}
	return _c
}

// SetDueDate sets the "due_date" field.
func (_c *TaskCreate) SetDueDate(v time.Time) *TaskCreate {
	_c.mutation.SetDueDate(v)
	return _c
}

// SetMessageID sets the "message_id" field.
func (_c *TaskCreate) SetMessageID(v string) *TaskCreate {
	_c.mutation.SetMessageID(v)
	return _c
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (_c *TaskCreate) SetNillableMessageID(v *string) *TaskCreate {
	if v != nil {
		_c.SetMessageID(*v)
	}
	return _c
}

// SetChannelID sets the "channel_id" field.
func (_c *TaskCreate) SetChannelID(v string) *TaskCreate {
	_c.mutation.SetChannelID(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *TaskCreate) SetCreatedAt(v time.Time) *TaskCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *TaskCreate) SetNillableCreatedAt(v *time.Time) *TaskCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *TaskCreate) SetUpdatedAt(v time.Time) *TaskCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *TaskCreate) SetNillableUpdatedAt(v *time.Time) *TaskCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *TaskCreate) SetID(v uuid.UUID) *TaskCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *TaskCreate) SetNillableID(v *uuid.UUID) *TaskCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddCategoryIDs adds the "category" edge to the Category entity by IDs.
func (_c *TaskCreate) AddCategoryIDs(ids ...uuid.UUID) *TaskCreate {
	_c.mutation.AddCategoryIDs(ids...)
	return _c
}

// AddCategory adds the "category" edges to the Category entity.
func (_c *TaskCreate) AddCategory(v ...*Category) *TaskCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddCategoryIDs(ids...)
}

// SetAssigneeID sets the "assignee" edge to the Assignee entity by ID.
func (_c *TaskCreate) SetAssigneeID(id uuid.UUID) *TaskCreate {
	_c.mutation.SetAssigneeID(id)
	return _c
}

// SetNillableAssigneeID sets the "assignee" edge to the Assignee entity by ID if the given value is not nil.
func (_c *TaskCreate) SetNillableAssigneeID(id *uuid.UUID) *TaskCreate {
	if id != nil {
		_c = _c.SetAssigneeID(*id)
	}
	return _c
}

// SetAssignee sets the "assignee" edge to the Assignee entity.
func (_c *TaskCreate) SetAssignee(v *Assignee) *TaskCreate {
	return _c.SetAssigneeID(v.ID)
}

// SetReminderID sets the "reminder" edge to the Reminder entity by ID.
func (_c *TaskCreate) SetReminderID(id uuid.UUID) *TaskCreate {
	_c.mutation.SetReminderID(id)
	return _c
}

// SetNillableReminderID sets the "reminder" edge to the Reminder entity by ID if the given value is not nil.
func (_c *TaskCreate) SetNillableReminderID(id *uuid.UUID) *TaskCreate {
	if id != nil {
		_c = _c.SetReminderID(*id)
	}
	return _c
}

// SetReminder sets the "reminder" edge to the Reminder entity.
func (_c *TaskCreate) SetReminder(v *Reminder) *TaskCreate {
	return _c.SetReminderID(v.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (_c *TaskCreate) Mutation() *TaskMutation {
	return _c.mutation
}

// Save creates the Task in the database.
func (_c *TaskCreate) Save(ctx context.Context) (*Task, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TaskCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TaskCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *TaskCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := task.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.Importance(); !ok {
		v := task.DefaultImportance
		_c.mutation.SetImportance(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := task.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := task.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := task.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TaskCreate) check() error {
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Task.title"`)}
	}
	if v, ok := _c.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Task.title": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Task.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Importance(); !ok {
		return &ValidationError{Name: "importance", err: errors.New(`ent: missing required field "Task.importance"`)}
	}
	if v, ok := _c.mutation.Importance(); ok {
		if err := task.ImportanceValidator(v); err != nil {
			return &ValidationError{Name: "importance", err: fmt.Errorf(`ent: validator failed for field "Task.importance": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DueDate(); !ok {
		return &ValidationError{Name: "due_date", err: errors.New(`ent: missing required field "Task.due_date"`)}
	}
	if _, ok := _c.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`ent: missing required field "Task.channel_id"`)}
	}
	if v, ok := _c.mutation.ChannelID(); ok {
		if err := task.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "Task.channel_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Task.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Task.updated_at"`)}
	}
	return nil
}

func (_c *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Importance(); ok {
		_spec.SetField(task.FieldImportance, field.TypeEnum, value)
		_node.Importance = value
	}
	if value, ok := _c.mutation.DueDate(); ok {
		_spec.SetField(task.FieldDueDate, field.TypeTime, value)
		_node.DueDate = value
	}
	if value, ok := _c.mutation.MessageID(); ok {
		_spec.SetField(task.FieldMessageID, field.TypeString, value)
		_node.MessageID = value
	}
	if value, ok := _c.mutation.ChannelID(); ok {
		_spec.SetField(task.FieldChannelID, field.TypeString, value)
		_node.ChannelID = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.CategoryTable,
			Columns: task.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AssigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   task.AssigneeTable,
			Columns: []string{task.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assignee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ReminderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   task.ReminderTable,
			Columns: []string{task.ReminderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reminder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	err      error
	builders []*TaskCreate
}

// Save creates the Task entities in the database.
func (_c *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Task, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
