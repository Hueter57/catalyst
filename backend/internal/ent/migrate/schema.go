// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AssigneesColumns holds the columns for the "assignees" table.
	AssigneesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID, Unique: true},
		{Name: "task_assignee", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// AssigneesTable holds the schema information for the "assignees" table.
	AssigneesTable = &schema.Table{
		Name:       "assignees",
		Columns:    AssigneesColumns,
		PrimaryKey: []*schema.Column{AssigneesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "assignees_tasks_assignee",
				Columns:    []*schema.Column{AssigneesColumns[2]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CategoriesColumns holds the columns for the "categories" table.
	CategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// CategoriesTable holds the schema information for the "categories" table.
	CategoriesTable = &schema.Table{
		Name:       "categories",
		Columns:    CategoriesColumns,
		PrimaryKey: []*schema.Column{CategoriesColumns[0]},
	}
	// RemindersColumns holds the columns for the "reminders" table.
	RemindersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "remind_at", Type: field.TypeTime},
		{Name: "task_reminder", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// RemindersTable holds the schema information for the "reminders" table.
	RemindersTable = &schema.Table{
		Name:       "reminders",
		Columns:    RemindersColumns,
		PrimaryKey: []*schema.Column{RemindersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "reminders_tasks_reminder",
				Columns:    []*schema.Column{RemindersColumns[2]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TasksColumns holds the columns for the "tasks" table.
	TasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeString, Default: "in_progress"},
		{Name: "importance", Type: field.TypeString, Default: "low"},
		{Name: "due_date", Type: field.TypeTime},
		{Name: "message_id", Type: field.TypeString, Nullable: true},
		{Name: "channel_id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// TasksTable holds the schema information for the "tasks" table.
	TasksTable = &schema.Table{
		Name:       "tasks",
		Columns:    TasksColumns,
		PrimaryKey: []*schema.Column{TasksColumns[0]},
	}
	// TaskCategoryColumns holds the columns for the "task_category" table.
	TaskCategoryColumns = []*schema.Column{
		{Name: "task_id", Type: field.TypeUUID},
		{Name: "category_id", Type: field.TypeUUID},
	}
	// TaskCategoryTable holds the schema information for the "task_category" table.
	TaskCategoryTable = &schema.Table{
		Name:       "task_category",
		Columns:    TaskCategoryColumns,
		PrimaryKey: []*schema.Column{TaskCategoryColumns[0], TaskCategoryColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "task_category_task_id",
				Columns:    []*schema.Column{TaskCategoryColumns[0]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "task_category_category_id",
				Columns:    []*schema.Column{TaskCategoryColumns[1]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AssigneesTable,
		CategoriesTable,
		RemindersTable,
		TasksTable,
		TaskCategoryTable,
	}
)

func init() {
	AssigneesTable.ForeignKeys[0].RefTable = TasksTable
	RemindersTable.ForeignKeys[0].RefTable = TasksTable
	TaskCategoryTable.ForeignKeys[0].RefTable = TasksTable
	TaskCategoryTable.ForeignKeys[1].RefTable = CategoriesTable
}
