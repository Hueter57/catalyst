// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hueter57/catalyst/backend/internal/ent/assignee"
	"github.com/hueter57/catalyst/backend/internal/ent/category"
	"github.com/hueter57/catalyst/backend/internal/ent/predicate"
	"github.com/hueter57/catalyst/backend/internal/ent/reminder"
	"github.com/hueter57/catalyst/backend/internal/ent/task"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (_u *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTitle sets the "title" field.
func (_u *TaskUpdate) SetTitle(v string) *TaskUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableTitle(v *string) *TaskUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *TaskUpdate) SetDescription(v string) *TaskUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableDescription(v *string) *TaskUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *TaskUpdate) ClearDescription() *TaskUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetStatus sets the "status" field.
func (_u *TaskUpdate) SetStatus(v string) *TaskUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableStatus(v *string) *TaskUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetImportance sets the "importance" field.
func (_u *TaskUpdate) SetImportance(v string) *TaskUpdate {
	_u.mutation.SetImportance(v)
	return _u
}

// SetNillableImportance sets the "importance" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableImportance(v *string) *TaskUpdate {
	if v != nil {
		_u.SetImportance(*v)
	}
	return _u
}

// SetDueDate sets the "due_date" field.
func (_u *TaskUpdate) SetDueDate(v time.Time) *TaskUpdate {
	_u.mutation.SetDueDate(v)
	return _u
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableDueDate(v *time.Time) *TaskUpdate {
	if v != nil {
		_u.SetDueDate(*v)
	}
	return _u
}

// SetMessageID sets the "message_id" field.
func (_u *TaskUpdate) SetMessageID(v string) *TaskUpdate {
	_u.mutation.SetMessageID(v)
	return _u
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableMessageID(v *string) *TaskUpdate {
	if v != nil {
		_u.SetMessageID(*v)
	}
	return _u
}

// ClearMessageID clears the value of the "message_id" field.
func (_u *TaskUpdate) ClearMessageID() *TaskUpdate {
	_u.mutation.ClearMessageID()
	return _u
}

// SetChannelID sets the "channel_id" field.
func (_u *TaskUpdate) SetChannelID(v string) *TaskUpdate {
	_u.mutation.SetChannelID(v)
	return _u
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableChannelID(v *string) *TaskUpdate {
	if v != nil {
		_u.SetChannelID(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *TaskUpdate) SetCreatedAt(v time.Time) *TaskUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableCreatedAt(v *time.Time) *TaskUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TaskUpdate) SetUpdatedAt(v time.Time) *TaskUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddCategoryIDs adds the "category" edge to the Category entity by IDs.
func (_u *TaskUpdate) AddCategoryIDs(ids ...uuid.UUID) *TaskUpdate {
	_u.mutation.AddCategoryIDs(ids...)
	return _u
}

// AddCategory adds the "category" edges to the Category entity.
func (_u *TaskUpdate) AddCategory(v ...*Category) *TaskUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCategoryIDs(ids...)
}

// SetAssigneeID sets the "assignee" edge to the Assignee entity by ID.
func (_u *TaskUpdate) SetAssigneeID(id uuid.UUID) *TaskUpdate {
	_u.mutation.SetAssigneeID(id)
	return _u
}

// SetNillableAssigneeID sets the "assignee" edge to the Assignee entity by ID if the given value is not nil.
func (_u *TaskUpdate) SetNillableAssigneeID(id *uuid.UUID) *TaskUpdate {
	if id != nil {
		_u = _u.SetAssigneeID(*id)
	}
	return _u
}

// SetAssignee sets the "assignee" edge to the Assignee entity.
func (_u *TaskUpdate) SetAssignee(v *Assignee) *TaskUpdate {
	return _u.SetAssigneeID(v.ID)
}

// SetReminderID sets the "reminder" edge to the Reminder entity by ID.
func (_u *TaskUpdate) SetReminderID(id uuid.UUID) *TaskUpdate {
	_u.mutation.SetReminderID(id)
	return _u
}

// SetNillableReminderID sets the "reminder" edge to the Reminder entity by ID if the given value is not nil.
func (_u *TaskUpdate) SetNillableReminderID(id *uuid.UUID) *TaskUpdate {
	if id != nil {
		_u = _u.SetReminderID(*id)
	}
	return _u
}

// SetReminder sets the "reminder" edge to the Reminder entity.
func (_u *TaskUpdate) SetReminder(v *Reminder) *TaskUpdate {
	return _u.SetReminderID(v.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (_u *TaskUpdate) Mutation() *TaskMutation {
	return _u.mutation
}

// ClearCategory clears all "category" edges to the Category entity.
func (_u *TaskUpdate) ClearCategory() *TaskUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// RemoveCategoryIDs removes the "category" edge to Category entities by IDs.
func (_u *TaskUpdate) RemoveCategoryIDs(ids ...uuid.UUID) *TaskUpdate {
	_u.mutation.RemoveCategoryIDs(ids...)
	return _u
}

// RemoveCategory removes "category" edges to Category entities.
func (_u *TaskUpdate) RemoveCategory(v ...*Category) *TaskUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCategoryIDs(ids...)
}

// ClearAssignee clears the "assignee" edge to the Assignee entity.
func (_u *TaskUpdate) ClearAssignee() *TaskUpdate {
	_u.mutation.ClearAssignee()
	return _u
}

// ClearReminder clears the "reminder" edge to the Reminder entity.
func (_u *TaskUpdate) ClearReminder() *TaskUpdate {
	_u.mutation.ClearReminder()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TaskUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TaskUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TaskUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TaskUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TaskUpdate) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Task.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ChannelID(); ok {
		if err := task.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "Task.channel_id": %w`, err)}
		}
	}
	return nil
}

func (_u *TaskUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(task.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Importance(); ok {
		_spec.SetField(task.FieldImportance, field.TypeString, value)
	}
	if value, ok := _u.mutation.DueDate(); ok {
		_spec.SetField(task.FieldDueDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.MessageID(); ok {
		_spec.SetField(task.FieldMessageID, field.TypeString, value)
	}
	if _u.mutation.MessageIDCleared() {
		_spec.ClearField(task.FieldMessageID, field.TypeString)
	}
	if value, ok := _u.mutation.ChannelID(); ok {
		_spec.SetField(task.FieldChannelID, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.CategoryTable,
			Columns: task.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCategoryIDs(); len(nodes) > 0 && !_u.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.CategoryTable,
			Columns: task.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.CategoryTable,
			Columns: task.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   task.AssigneeTable,
			Columns: []string{task.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assignee.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   task.AssigneeTable,
			Columns: []string{task.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assignee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReminderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   task.ReminderTable,
			Columns: []string{task.ReminderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reminder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReminderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   task.ReminderTable,
			Columns: []string{task.ReminderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reminder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetTitle sets the "title" field.
func (_u *TaskUpdateOne) SetTitle(v string) *TaskUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableTitle(v *string) *TaskUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *TaskUpdateOne) SetDescription(v string) *TaskUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableDescription(v *string) *TaskUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *TaskUpdateOne) ClearDescription() *TaskUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetStatus sets the "status" field.
func (_u *TaskUpdateOne) SetStatus(v string) *TaskUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableStatus(v *string) *TaskUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetImportance sets the "importance" field.
func (_u *TaskUpdateOne) SetImportance(v string) *TaskUpdateOne {
	_u.mutation.SetImportance(v)
	return _u
}

// SetNillableImportance sets the "importance" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableImportance(v *string) *TaskUpdateOne {
	if v != nil {
		_u.SetImportance(*v)
	}
	return _u
}

// SetDueDate sets the "due_date" field.
func (_u *TaskUpdateOne) SetDueDate(v time.Time) *TaskUpdateOne {
	_u.mutation.SetDueDate(v)
	return _u
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableDueDate(v *time.Time) *TaskUpdateOne {
	if v != nil {
		_u.SetDueDate(*v)
	}
	return _u
}

// SetMessageID sets the "message_id" field.
func (_u *TaskUpdateOne) SetMessageID(v string) *TaskUpdateOne {
	_u.mutation.SetMessageID(v)
	return _u
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableMessageID(v *string) *TaskUpdateOne {
	if v != nil {
		_u.SetMessageID(*v)
	}
	return _u
}

// ClearMessageID clears the value of the "message_id" field.
func (_u *TaskUpdateOne) ClearMessageID() *TaskUpdateOne {
	_u.mutation.ClearMessageID()
	return _u
}

// SetChannelID sets the "channel_id" field.
func (_u *TaskUpdateOne) SetChannelID(v string) *TaskUpdateOne {
	_u.mutation.SetChannelID(v)
	return _u
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableChannelID(v *string) *TaskUpdateOne {
	if v != nil {
		_u.SetChannelID(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *TaskUpdateOne) SetCreatedAt(v time.Time) *TaskUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableCreatedAt(v *time.Time) *TaskUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TaskUpdateOne) SetUpdatedAt(v time.Time) *TaskUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddCategoryIDs adds the "category" edge to the Category entity by IDs.
func (_u *TaskUpdateOne) AddCategoryIDs(ids ...uuid.UUID) *TaskUpdateOne {
	_u.mutation.AddCategoryIDs(ids...)
	return _u
}

// AddCategory adds the "category" edges to the Category entity.
func (_u *TaskUpdateOne) AddCategory(v ...*Category) *TaskUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCategoryIDs(ids...)
}

// SetAssigneeID sets the "assignee" edge to the Assignee entity by ID.
func (_u *TaskUpdateOne) SetAssigneeID(id uuid.UUID) *TaskUpdateOne {
	_u.mutation.SetAssigneeID(id)
	return _u
}

// SetNillableAssigneeID sets the "assignee" edge to the Assignee entity by ID if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableAssigneeID(id *uuid.UUID) *TaskUpdateOne {
	if id != nil {
		_u = _u.SetAssigneeID(*id)
	}
	return _u
}

// SetAssignee sets the "assignee" edge to the Assignee entity.
func (_u *TaskUpdateOne) SetAssignee(v *Assignee) *TaskUpdateOne {
	return _u.SetAssigneeID(v.ID)
}

// SetReminderID sets the "reminder" edge to the Reminder entity by ID.
func (_u *TaskUpdateOne) SetReminderID(id uuid.UUID) *TaskUpdateOne {
	_u.mutation.SetReminderID(id)
	return _u
}

// SetNillableReminderID sets the "reminder" edge to the Reminder entity by ID if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableReminderID(id *uuid.UUID) *TaskUpdateOne {
	if id != nil {
		_u = _u.SetReminderID(*id)
	}
	return _u
}

// SetReminder sets the "reminder" edge to the Reminder entity.
func (_u *TaskUpdateOne) SetReminder(v *Reminder) *TaskUpdateOne {
	return _u.SetReminderID(v.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (_u *TaskUpdateOne) Mutation() *TaskMutation {
	return _u.mutation
}

// ClearCategory clears all "category" edges to the Category entity.
func (_u *TaskUpdateOne) ClearCategory() *TaskUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// RemoveCategoryIDs removes the "category" edge to Category entities by IDs.
func (_u *TaskUpdateOne) RemoveCategoryIDs(ids ...uuid.UUID) *TaskUpdateOne {
	_u.mutation.RemoveCategoryIDs(ids...)
	return _u
}

// RemoveCategory removes "category" edges to Category entities.
func (_u *TaskUpdateOne) RemoveCategory(v ...*Category) *TaskUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCategoryIDs(ids...)
}

// ClearAssignee clears the "assignee" edge to the Assignee entity.
func (_u *TaskUpdateOne) ClearAssignee() *TaskUpdateOne {
	_u.mutation.ClearAssignee()
	return _u
}

// ClearReminder clears the "reminder" edge to the Reminder entity.
func (_u *TaskUpdateOne) ClearReminder() *TaskUpdateOne {
	_u.mutation.ClearReminder()
	return _u
}

// Where appends a list predicates to the TaskUpdate builder.
func (_u *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Task entity.
func (_u *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TaskUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TaskUpdateOne) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Task.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ChannelID(); ok {
		if err := task.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`ent: validator failed for field "Task.channel_id": %w`, err)}
		}
	}
	return nil
}

func (_u *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(task.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Importance(); ok {
		_spec.SetField(task.FieldImportance, field.TypeString, value)
	}
	if value, ok := _u.mutation.DueDate(); ok {
		_spec.SetField(task.FieldDueDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.MessageID(); ok {
		_spec.SetField(task.FieldMessageID, field.TypeString, value)
	}
	if _u.mutation.MessageIDCleared() {
		_spec.ClearField(task.FieldMessageID, field.TypeString)
	}
	if value, ok := _u.mutation.ChannelID(); ok {
		_spec.SetField(task.FieldChannelID, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.CategoryTable,
			Columns: task.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCategoryIDs(); len(nodes) > 0 && !_u.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.CategoryTable,
			Columns: task.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.CategoryTable,
			Columns: task.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   task.AssigneeTable,
			Columns: []string{task.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assignee.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   task.AssigneeTable,
			Columns: []string{task.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assignee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReminderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   task.ReminderTable,
			Columns: []string{task.ReminderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reminder.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReminderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   task.ReminderTable,
			Columns: []string{task.ReminderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reminder.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
