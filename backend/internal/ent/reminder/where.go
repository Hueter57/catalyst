// Code generated by ent, DO NOT EDIT.

package reminder

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/hueter57/catalyst/backend/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Reminder {
	return predicate.Reminder(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Reminder {
	return predicate.Reminder(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Reminder {
	return predicate.Reminder(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Reminder {
	return predicate.Reminder(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Reminder {
	return predicate.Reminder(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Reminder {
	return predicate.Reminder(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Reminder {
	return predicate.Reminder(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Reminder {
	return predicate.Reminder(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Reminder {
	return predicate.Reminder(sql.FieldLTE(FieldID, id))
}

// RemindAt applies equality check predicate on the "remind_at" field. It's identical to RemindAtEQ.
func RemindAt(v time.Time) predicate.Reminder {
	return predicate.Reminder(sql.FieldEQ(FieldRemindAt, v))
}

// RemindAtEQ applies the EQ predicate on the "remind_at" field.
func RemindAtEQ(v time.Time) predicate.Reminder {
	return predicate.Reminder(sql.FieldEQ(FieldRemindAt, v))
}

// RemindAtNEQ applies the NEQ predicate on the "remind_at" field.
func RemindAtNEQ(v time.Time) predicate.Reminder {
	return predicate.Reminder(sql.FieldNEQ(FieldRemindAt, v))
}

// RemindAtIn applies the In predicate on the "remind_at" field.
func RemindAtIn(vs ...time.Time) predicate.Reminder {
	return predicate.Reminder(sql.FieldIn(FieldRemindAt, vs...))
}

// RemindAtNotIn applies the NotIn predicate on the "remind_at" field.
func RemindAtNotIn(vs ...time.Time) predicate.Reminder {
	return predicate.Reminder(sql.FieldNotIn(FieldRemindAt, vs...))
}

// RemindAtGT applies the GT predicate on the "remind_at" field.
func RemindAtGT(v time.Time) predicate.Reminder {
	return predicate.Reminder(sql.FieldGT(FieldRemindAt, v))
}

// RemindAtGTE applies the GTE predicate on the "remind_at" field.
func RemindAtGTE(v time.Time) predicate.Reminder {
	return predicate.Reminder(sql.FieldGTE(FieldRemindAt, v))
}

// RemindAtLT applies the LT predicate on the "remind_at" field.
func RemindAtLT(v time.Time) predicate.Reminder {
	return predicate.Reminder(sql.FieldLT(FieldRemindAt, v))
}

// RemindAtLTE applies the LTE predicate on the "remind_at" field.
func RemindAtLTE(v time.Time) predicate.Reminder {
	return predicate.Reminder(sql.FieldLTE(FieldRemindAt, v))
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.Reminder {
	return predicate.Reminder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.Reminder {
	return predicate.Reminder(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Reminder) predicate.Reminder {
	return predicate.Reminder(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Reminder) predicate.Reminder {
	return predicate.Reminder(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Reminder) predicate.Reminder {
	return predicate.Reminder(sql.NotPredicates(p))
}
