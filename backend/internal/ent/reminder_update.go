// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hueter57/catalyst/backend/internal/ent/predicate"
	"github.com/hueter57/catalyst/backend/internal/ent/reminder"
	"github.com/hueter57/catalyst/backend/internal/ent/task"
)

// ReminderUpdate is the builder for updating Reminder entities.
type ReminderUpdate struct {
	config
	hooks    []Hook
	mutation *ReminderMutation
}

// Where appends a list predicates to the ReminderUpdate builder.
func (_u *ReminderUpdate) Where(ps ...predicate.Reminder) *ReminderUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetRemindAt sets the "remind_at" field.
func (_u *ReminderUpdate) SetRemindAt(v time.Time) *ReminderUpdate {
	_u.mutation.SetRemindAt(v)
	return _u
}

// SetNillableRemindAt sets the "remind_at" field if the given value is not nil.
func (_u *ReminderUpdate) SetNillableRemindAt(v *time.Time) *ReminderUpdate {
	if v != nil {
		_u.SetRemindAt(*v)
	}
	return _u
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (_u *ReminderUpdate) SetTaskID(id uuid.UUID) *ReminderUpdate {
	_u.mutation.SetTaskID(id)
	return _u
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (_u *ReminderUpdate) SetNillableTaskID(id *uuid.UUID) *ReminderUpdate {
	if id != nil {
		_u = _u.SetTaskID(*id)
	}
	return _u
}

// SetTask sets the "task" edge to the Task entity.
func (_u *ReminderUpdate) SetTask(v *Task) *ReminderUpdate {
	return _u.SetTaskID(v.ID)
}

// Mutation returns the ReminderMutation object of the builder.
func (_u *ReminderUpdate) Mutation() *ReminderMutation {
	return _u.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (_u *ReminderUpdate) ClearTask() *ReminderUpdate {
	_u.mutation.ClearTask()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ReminderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ReminderUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ReminderUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ReminderUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *ReminderUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(reminder.Table, reminder.Columns, sqlgraph.NewFieldSpec(reminder.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.RemindAt(); ok {
		_spec.SetField(reminder.FieldRemindAt, field.TypeTime, value)
	}
	if _u.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   reminder.TaskTable,
			Columns: []string{reminder.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   reminder.TaskTable,
			Columns: []string{reminder.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reminder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ReminderUpdateOne is the builder for updating a single Reminder entity.
type ReminderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReminderMutation
}

// SetRemindAt sets the "remind_at" field.
func (_u *ReminderUpdateOne) SetRemindAt(v time.Time) *ReminderUpdateOne {
	_u.mutation.SetRemindAt(v)
	return _u
}

// SetNillableRemindAt sets the "remind_at" field if the given value is not nil.
func (_u *ReminderUpdateOne) SetNillableRemindAt(v *time.Time) *ReminderUpdateOne {
	if v != nil {
		_u.SetRemindAt(*v)
	}
	return _u
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (_u *ReminderUpdateOne) SetTaskID(id uuid.UUID) *ReminderUpdateOne {
	_u.mutation.SetTaskID(id)
	return _u
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (_u *ReminderUpdateOne) SetNillableTaskID(id *uuid.UUID) *ReminderUpdateOne {
	if id != nil {
		_u = _u.SetTaskID(*id)
	}
	return _u
}

// SetTask sets the "task" edge to the Task entity.
func (_u *ReminderUpdateOne) SetTask(v *Task) *ReminderUpdateOne {
	return _u.SetTaskID(v.ID)
}

// Mutation returns the ReminderMutation object of the builder.
func (_u *ReminderUpdateOne) Mutation() *ReminderMutation {
	return _u.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (_u *ReminderUpdateOne) ClearTask() *ReminderUpdateOne {
	_u.mutation.ClearTask()
	return _u
}

// Where appends a list predicates to the ReminderUpdate builder.
func (_u *ReminderUpdateOne) Where(ps ...predicate.Reminder) *ReminderUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ReminderUpdateOne) Select(field string, fields ...string) *ReminderUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Reminder entity.
func (_u *ReminderUpdateOne) Save(ctx context.Context) (*Reminder, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ReminderUpdateOne) SaveX(ctx context.Context) *Reminder {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ReminderUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ReminderUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *ReminderUpdateOne) sqlSave(ctx context.Context) (_node *Reminder, err error) {
	_spec := sqlgraph.NewUpdateSpec(reminder.Table, reminder.Columns, sqlgraph.NewFieldSpec(reminder.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reminder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reminder.FieldID)
		for _, f := range fields {
			if !reminder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reminder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.RemindAt(); ok {
		_spec.SetField(reminder.FieldRemindAt, field.TypeTime, value)
	}
	if _u.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   reminder.TaskTable,
			Columns: []string{reminder.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   reminder.TaskTable,
			Columns: []string{reminder.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Reminder{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reminder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
