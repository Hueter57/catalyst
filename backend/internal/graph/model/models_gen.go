// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"net/url"
	"strconv"
	"time"
)

type Category struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type CreateCategoryInput struct {
	Name string `json:"name"`
}

type CreateTaskInput struct {
	Title         string       `json:"title"`
	Description   *string      `json:"description,omitempty"`
	Status        *TaskStatus  `json:"status,omitempty"`
	Importance    Importance   `json:"importance"`
	DueDate       time.Time    `json:"dueDate"`
	MessageURL    *url.URL     `json:"messageURL,omitempty"`
	ChannelID     string       `json:"channelId"`
	CategoryID    string       `json:"categoryId"`
	AssigneeIds   []string     `json:"assigneeIds"`
	ReminderDates []*time.Time `json:"reminderDates,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type Reminder struct {
	ID       string    `json:"id"`
	RemindAt time.Time `json:"remindAt"`
}

type Task struct {
	ID          string      `json:"id"`
	Title       string      `json:"title"`
	Description *string     `json:"description,omitempty"`
	Status      TaskStatus  `json:"status"`
	Importance  Importance  `json:"importance"`
	DueDate     time.Time   `json:"dueDate"`
	MessageURL  *url.URL    `json:"messageURL,omitempty"`
	ChannelID   string      `json:"channelId"`
	Category    *Category   `json:"category"`
	Assignees   []*User     `json:"assignees"`
	Reminders   []*Reminder `json:"reminders"`
	CreatedAt   time.Time   `json:"createdAt"`
	UpdatedAt   time.Time   `json:"updatedAt"`
}

type TaskFilterInput struct {
	Status        []TaskStatus `json:"status,omitempty"`
	Importance    []Importance `json:"importance,omitempty"`
	AssigneeIds   []string     `json:"assigneeIds,omitempty"`
	DueDateBefore *time.Time   `json:"dueDateBefore,omitempty"`
	DueDateAfter  *time.Time   `json:"dueDateAfter,omitempty"`
}

type TaskSortInput struct {
	Key   TaskSortKey `json:"key"`
	Order *SortOrder  `json:"order,omitempty"`
}

type UpdateCategoryInput struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type UpdateTaskInput struct {
	ID          string      `json:"id"`
	Title       *string     `json:"title,omitempty"`
	Description *string     `json:"description,omitempty"`
	Status      *TaskStatus `json:"status,omitempty"`
	Importance  *Importance `json:"importance,omitempty"`
	DueDate     *time.Time  `json:"dueDate,omitempty"`
	MessageURL  *url.URL    `json:"messageURL,omitempty"`
	ChannelID   *string     `json:"channelId,omitempty"`
	CategoryID  *string     `json:"categoryId,omitempty"`
	AssigneeIds []string    `json:"assigneeIds,omitempty"`
}

type User struct {
	TraqID string  `json:"traqId"`
	Name   string  `json:"name"`
	Icon   *string `json:"icon,omitempty"`
}

type Importance string

const (
	ImportanceHigh   Importance = "HIGH"
	ImportanceMedium Importance = "MEDIUM"
	ImportanceLow    Importance = "LOW"
)

var AllImportance = []Importance{
	ImportanceHigh,
	ImportanceMedium,
	ImportanceLow,
}

func (e Importance) IsValid() bool {
	switch e {
	case ImportanceHigh, ImportanceMedium, ImportanceLow:
		return true
	}
	return false
}

func (e Importance) String() string {
	return string(e)
}

func (e *Importance) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Importance(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Importance", str)
	}
	return nil
}

func (e Importance) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Importance) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Importance) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SortOrder string

const (
	SortOrderAsc  SortOrder = "ASC"
	SortOrderDesc SortOrder = "DESC"
)

var AllSortOrder = []SortOrder{
	SortOrderAsc,
	SortOrderDesc,
}

func (e SortOrder) IsValid() bool {
	switch e {
	case SortOrderAsc, SortOrderDesc:
		return true
	}
	return false
}

func (e SortOrder) String() string {
	return string(e)
}

func (e *SortOrder) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOrder", str)
	}
	return nil
}

func (e SortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SortOrder) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SortOrder) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type TaskSortKey string

const (
	TaskSortKeyDueDate        TaskSortKey = "DUE_DATE"
	TaskSortKeyCreatedAt      TaskSortKey = "CREATED_AT"
	TaskSortKeyNextReminderAt TaskSortKey = "NEXT_REMINDER_AT"
)

var AllTaskSortKey = []TaskSortKey{
	TaskSortKeyDueDate,
	TaskSortKeyCreatedAt,
	TaskSortKeyNextReminderAt,
}

func (e TaskSortKey) IsValid() bool {
	switch e {
	case TaskSortKeyDueDate, TaskSortKeyCreatedAt, TaskSortKeyNextReminderAt:
		return true
	}
	return false
}

func (e TaskSortKey) String() string {
	return string(e)
}

func (e *TaskSortKey) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskSortKey(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskSortKey", str)
	}
	return nil
}

func (e TaskSortKey) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TaskSortKey) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TaskSortKey) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type TaskStatus string

const (
	TaskStatusInProgress TaskStatus = "IN_PROGRESS"
	TaskStatusCompleted  TaskStatus = "COMPLETED"
	TaskStatusWaiting    TaskStatus = "WAITING"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusInProgress,
	TaskStatusCompleted,
	TaskStatusWaiting,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusInProgress, TaskStatusCompleted, TaskStatusWaiting:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TaskStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TaskStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
